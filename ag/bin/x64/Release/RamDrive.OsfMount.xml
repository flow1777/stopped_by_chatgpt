<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RamDrive.OsfMount</name>
    </assembly>
    <members>
        <member name="T:RamDrive.OsfMount.MountError">
            <summary>
            Type describing possible errors of calling <seealso cref="M:RamDrive.OsfMount.OsfMountRamDrive.Mount(ByteSizeLib.ByteSize,System.Nullable{RamDrive.OsfMount.DriveLetter},RamDrive.OsfMount.FileSystemType)"/>.
            </summary>
        </member>
        <member name="T:RamDrive.OsfMount.DriveDoesNotExistOrNotAllowed">
            <summary>
            Error that can be generated by <seealso cref="M:RamDrive.OsfMount.OsfMountRamDrive.ForceUnmount(RamDrive.OsfMount.DriveLetter)"/>
             or <seealso cref="M:RamDrive.OsfMount.OsfMountRamDrive.Unmount(RamDrive.OsfMount.DriveLetter)"/>.
            </summary>
        </member>
        <member name="M:RamDrive.OsfMount.DriveDoesNotExistOrNotAllowed.#ctor(RamDrive.OsfMount.DriveLetter)">
            <summary>
            Error that can be generated by <seealso cref="M:RamDrive.OsfMount.OsfMountRamDrive.ForceUnmount(RamDrive.OsfMount.DriveLetter)"/>
             or <seealso cref="M:RamDrive.OsfMount.OsfMountRamDrive.Unmount(RamDrive.OsfMount.DriveLetter)"/>.
            </summary>
        </member>
        <member name="T:RamDrive.OsfMount.UnmountError">
            <summary>
            Type describing possible errors of calling <seealso cref="M:RamDrive.OsfMount.OsfMountRamDrive.Unmount(RamDrive.OsfMount.DriveLetter)"/>.
            </summary>
        </member>
        <member name="T:RamDrive.OsfMount.FileSystemType">
            <summary>
            Type of file system in which the ram drive will be formatted.
            </summary>
        </member>
        <member name="T:RamDrive.OsfMount.DriveLetter">
            <summary>
            Letter to which the ram drive will be assigned.
            </summary>
        </member>
        <member name="T:RamDrive.OsfMount.OsfMountRamDrive">
            <summary>
            Api for osfmount ram drive operations.
            </summary>
        </member>
        <member name="M:RamDrive.OsfMount.OsfMountRamDrive.Mount(ByteSizeLib.ByteSize,System.Nullable{RamDrive.OsfMount.DriveLetter},RamDrive.OsfMount.FileSystemType)">
            <summary>
            Creates/mounts a ram drive, assigns a drive letter, and formats to the specified file system.
            </summary>
            <param name="size">Size of ram drive.</param>
            <param name="driveLetter">Letter of ram drive. If <see langword="null"/>, then the first available will be will be assigned.</param>
            <param name="fileSystem">File system of ram drive.</param>
            <returns><see langword="null"/> if no errors, when some error then <see cref="T:RamDrive.OsfMount.MountError"/>.</returns>
        </member>
        <member name="M:RamDrive.OsfMount.OsfMountRamDrive.Unmount(RamDrive.OsfMount.DriveLetter)">
            <summary>
            Deletes/unmounts a specified by letter drive.
            </summary>
            <param name="driveLetter">Letter of drive to unmount.</param>
            <returns><see langword="null"/> if no errors, when some error then <see cref="T:RamDrive.OsfMount.UnmountError"/>.</returns>
        </member>
        <member name="M:RamDrive.OsfMount.OsfMountRamDrive.ForceUnmount(RamDrive.OsfMount.DriveLetter)">
            <summary>
            Works like <see cref="M:RamDrive.OsfMount.OsfMountRamDrive.Unmount(RamDrive.OsfMount.DriveLetter)"/>, but does not worry about other processes that use the specified drive.
            </summary>
            <param name="driveLetter">Letter of drive to unmount.</param>
            <returns><see langword="null"/> if no errors, otherwise <see cref="T:RamDrive.OsfMount.DriveDoesNotExistOrNotAllowed"/>.</returns>
        </member>
    </members>
</doc>
